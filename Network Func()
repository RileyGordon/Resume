INT g_IPConnectionTimeouts = 0;
SOCKET Connect() {
	XNetStartupParams XNSP;
	ZeroMemory(&XNSP, sizeof(XNSP));
	XNSP.cfgSizeOfStruct = sizeof(XNetStartupParams);
	XNSP.cfgFlags = XNET_STARTUP_BYPASS_SECURITY;
	if (NetDll_XNetStartup(2, &XNSP) != S_OK)
		return INVALID_SOCKET;
	WSADATA WsaData;
	if (NetDll_WSAStartupEx(Decrypt(ENC_VAR(2)), MAKEWORD(Decrypt(ENC_VAR(0x02)), Decrypt(ENC_VAR(0x02))), &WsaData, Decrypt(ENC_VAR(0x02))) != S_OK)
		return INVALID_SOCKET;
	if ((m_Socket = NetDll_socket(2, AF_INET, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET)
		return INVALID_SOCKET;
	BOOL SockOpt = TRUE;
	if (NetDll_setsockopt(Decrypt(ENC_VAR(2)), m_Socket, SOL_SOCKET, Decrypt(ENC_VAR(0x5801)), (CONST PCHAR)&SockOpt, 0x04) != S_OK)
		return INVALID_SOCKET;
	DWORD SendRecvSize = 0x800;
	NetDll_setsockopt(2, m_Socket, SOL_SOCKET, SO_SNDBUF, (CONST PCHAR)&SendRecvSize, 0x04);
	NetDll_setsockopt(2, m_Socket, SOL_SOCKET, SO_RCVBUF, (CONST PCHAR)&SendRecvSize, 0x04);

reset:
	sockaddr_in sockaddr;
	sockaddr.sin_family = AF_INET;
	sockaddr.sin_port = htons(Decrypt(ENC_VAR(9854)));
	sockaddr.sin_addr.s_addr = inet_addr("?.?.?.?");

	if (NetDll_connect(2, m_Socket, (struct sockaddr*)&sockaddr, sizeof(sockaddr_in)) == SOCKET_ERROR) {
		if (g_IPConnectionTimeouts < 3) {
			g_IPConnectionTimeouts++;
			goto reset;
		}
		else {
			return INVALID_SOCKET;
		}
	}
	return m_Socket;
}

BOOL Send(DWORD Command, PVOID Buffer, DWORD Length) {
	BYTE Temp[0x28];
	memcpy(Temp, &Command, 0x04);
	memcpy(Temp + 0x04, Buffer, Length);
	if (NetDll_send(0x02, m_Socket, (PCHAR)Temp, 0x28, NULL) == SOCKET_ERROR)
		return FALSE;

	return TRUE;
}

BOOL Receive(PVOID Buffer, DWORD Length) {
	DWORD Remaining = Length;
	DWORD Received = NULL;
	while (Remaining > NULL) {
		DWORD RecvSize = min(Decrypt(ENC_VAR(0x800)), Remaining);
		DWORD Recv = NetDll_recv(2, m_Socket, (PCHAR)Buffer + Received, RecvSize, NULL);
		if (Recv == SOCKET_ERROR)
			return FALSE;

		if (Recv == NULL)
			break;

		Remaining -= Recv;
		Received += Recv;
	}
	if (Received != Length)
		return FALSE;

	return TRUE;
}

BOOL Process(DWORD Command, PVOID Request, DWORD RequestLength, PVOID Response, DWORD ResponseLength) {
	if (Connect() == INVALID_SOCKET)
		return FALSE;

	if (!Send(Command, Request, RequestLength))
		return FALSE;
    
	if (!Receive(Response, ResponseLength))
		return FALSE;

	return TRUE;
}
